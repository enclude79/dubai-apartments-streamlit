import streamlit as st
import pandas as pd
import sqlite3
import folium
from streamlit_folium import folium_static
import plotly.express as px
import plotly.graph_objects as go
import os
from datetime import datetime
import colorsys
import re

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
SQLITE_DB_PATH = "dubai_properties.db"

st.set_page_config(
    page_title="Dubai Property Analysis",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SQLite
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""
    try:
        conn = sqlite3.connect(SQLITE_DB_PATH)
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def execute_query(query, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ DataFrame"""
    try:
        conn = get_db_connection()
        if conn is None:
            return None
        
        if params:
            df = pd.read_sql_query(query, conn, params=params)
        else:
            df = pd.read_sql_query(query, conn)
        
        conn.close()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def extract_coordinates(geo_str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ '–®–∏—Ä–æ—Ç–∞: X, –î–æ–ª–≥–æ—Ç–∞: Y'"""
    if not isinstance(geo_str, str):
        return None, None
    
    lat_pattern = r'–®–∏—Ä–æ—Ç–∞:\s*([\d\.]+)'
    lng_pattern = r'–î–æ–ª–≥–æ—Ç–∞:\s*([\d\.]+)'
    
    lat_match = re.search(lat_pattern, geo_str)
    lng_match = re.search(lng_pattern, geo_str)
    
    lat = float(lat_match.group(1)) if lat_match else None
    lng = float(lng_match.group(1)) if lng_match else None
    
    return lat, lng

def get_properties(limit=100, offset=0, max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    base_query = "SELECT * FROM properties"
    
    conditions = []
    params = []
    
    if max_size is not None:
        conditions.append("area <= ?")
        params.append(max_size)
    
    if conditions:
        base_query += " WHERE " + " AND ".join(conditions)
    
    query = base_query + " ORDER BY id LIMIT ? OFFSET ?"
    params.extend([limit, offset])
    
    df = execute_query(query, params=tuple(params))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    count_query = "SELECT COUNT(*) as total FROM properties"
    if conditions:
        count_query += " WHERE " + " AND ".join(conditions)
    
    count_df = execute_query(count_query, params=tuple(params[:-2]) if params[:-2] else None)
    total_count = count_df.iloc[0]['total'] if count_df is not None else 0
    
    return {
        "data": df,
        "total": total_count,
        "limit": limit,
        "offset": offset
    }

def get_cheapest_properties_by_area(top_n=3, max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —Ä–∞–π–æ–Ω–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    query = """
    WITH RankedProperties AS (
        SELECT 
            *,
            ROW_NUMBER() OVER (PARTITION BY location ORDER BY price) as price_rank
        FROM properties
        WHERE 1=1
    """
    
    params = []
    if max_size is not None:
        query += " AND area <= ?"
        params.append(max_size)
    
    query += f"""
    )
    SELECT * FROM RankedProperties
    WHERE price_rank <= ?
    ORDER BY location, price_rank
    """
    params.append(top_n)
    
    df = execute_query(query, params=tuple(params))
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if df is not None:
        if 'rooms' in df.columns:
            df['bedrooms'] = df['rooms']
        if 'baths' in df.columns:
            df['bathrooms'] = df['baths']
        if 'location' in df.columns:
            df['area'] = df['location']
    
    return df

def get_property(property_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ ID"""
    query = "SELECT * FROM properties WHERE id = ?"
    df = execute_query(query, params=(property_id,))
    
    if df is not None and not df.empty:
        property_dict = df.iloc[0].to_dict()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å geography
        if 'geography' in property_dict and property_dict['geography']:
            lat, lng = extract_coordinates(property_dict['geography'])
            property_dict['latitude'] = lat
            property_dict['longitude'] = lng
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if 'rooms' in property_dict:
            property_dict['bedrooms'] = property_dict['rooms']
        if 'baths' in property_dict:
            property_dict['bathrooms'] = property_dict['baths']
        if 'location' in property_dict:
            property_dict['area'] = property_dict['location']
        
        return property_dict
    
    return None

def get_avg_price_by_area():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ —Ä–∞–π–æ–Ω–∞–º"""
    query = """
    SELECT location as area, AVG(price) as avg_price, COUNT(*) as count
    FROM properties
    GROUP BY location
    ORDER BY avg_price DESC
    """
    return execute_query(query)

def get_count_by_property_type():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    query = """
    SELECT property_type, COUNT(*) as count
    FROM properties
    GROUP BY property_type
    ORDER BY count DESC
    """
    return execute_query(query)

def get_map_data(max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    query = """
    SELECT id, title, price, location as area, property_type, area as size, rooms as bedrooms, baths as bathrooms, 
           geography
    FROM properties
    WHERE geography IS NOT NULL
    """
    
    params = []
    if max_size is not None:
        query += " AND area <= ?"
        params.append(max_size)
    
    df = execute_query(query, params=tuple(params) if params else None)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if df is not None and not df.empty:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ —Å—Ç–æ–ª–±—Ü—É geography
        df['latitude'] = None
        df['longitude'] = None
        
        for idx, row in df.iterrows():
            if isinstance(row['geography'], str):
                lat, lng = extract_coordinates(row['geography'])
                df.at[idx, 'latitude'] = lat
                df.at[idx, 'longitude'] = lng
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        df = df.dropna(subset=['latitude', 'longitude'])
    
    return df

def generate_area_colors(areas):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞"""
    unique_areas = list(set(areas))
    num_areas = len(unique_areas)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ HSV-–∫—Ä—É–≥—É
    colors = {}
    for i, area in enumerate(unique_areas):
        hue = i / num_areas
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HSV –≤ RGB, –∑–∞—Ç–µ–º –≤ hex
        r, g, b = colorsys.hsv_to_rgb(hue, 0.8, 0.9)
        color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'
        colors[area] = color
    
    return colors

def main():
    st.title("–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –î—É–±–∞–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.isfile(SQLITE_DB_PATH):
        st.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {SQLITE_DB_PATH}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
        return
    
    try:
        db_size = os.path.getsize(SQLITE_DB_PATH) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        db_modified = datetime.fromtimestamp(os.path.getmtime(SQLITE_DB_PATH))
        st.sidebar.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(SQLITE_DB_PATH)}\n–†–∞–∑–º–µ—Ä: {db_size:.2f} –ú–ë\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_modified.strftime('%d.%m.%Y %H:%M')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        if conn is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            tables_df = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table';", conn)
            if 'properties' not in tables_df['name'].values:
                st.error("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞ 'properties'.")
                st.write("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:", tables_df)
                conn.close()
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–µ–π
            count_df = pd.read_sql_query("SELECT COUNT(*) as count FROM properties;", conn)
            record_count = count_df.iloc[0]['count']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            coords_df = pd.read_sql_query("SELECT COUNT(*) as count FROM properties WHERE geography IS NOT NULL;", conn)
            coords_count = coords_df.iloc[0]['count']
            
            st.sidebar.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {record_count}\n–ó–∞–ø–∏—Å–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {coords_count}")
            
            if coords_count == 0 and record_count > 0:
                st.sidebar.warning("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (–ø–æ–ª–µ 'geography'). –ö–∞—Ä—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞.")
        except Exception as db_error:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        finally:
            conn.close()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_exists = os.path.isfile(SQLITE_DB_PATH)
    if db_exists:
        db_size = os.path.getsize(SQLITE_DB_PATH) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        db_modified = datetime.fromtimestamp(os.path.getmtime(SQLITE_DB_PATH))
        st.sidebar.info(
            f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {SQLITE_DB_PATH}\n"
            f"–†–∞–∑–º–µ—Ä: {db_size:.2f} –ú–ë\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_modified.strftime('%d.%m.%Y %H:%M')}"
        )
    else:
        st.sidebar.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {SQLITE_DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        st.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {SQLITE_DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏ –æ–±—ä–µ–∫—Ç–æ–≤ - –º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 80 –∫–≤.–º.
    max_size = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º.)", 40, 500, 80, 5)
    
    # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    top_n = st.sidebar.selectbox("–¢–æ–ø —Å–∞–º—ã—Ö –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É", [3, 5, 10], index=0)
    
    # –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["–ö–∞—Ä—Ç–∞", "–ù–µ–¥–æ—Ä–æ–≥–∏–µ –ø–æ —Ä–∞–π–æ–Ω–∞–º", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤"])
    
    with tab1:
        st.header("–ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        st.caption(f"–û–±—ä–µ–∫—Ç—ã –ø–ª–æ—â–∞–¥—å—é –¥–æ {max_size} –∫–≤.–º.")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
        try:
            map_data_df = get_map_data(max_size=max_size)
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {0 if map_data_df is None else len(map_data_df)}")
            
            if map_data_df is not None and not map_data_df.empty:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                valid_coords = map_data_df[map_data_df['latitude'].notna() & map_data_df['longitude'].notna()]
                st.write(f"–ó–∞–ø–∏—Å–µ–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏: {len(valid_coords)}")
                
                if len(valid_coords) > 0:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤
                    area_colors = generate_area_colors(map_data_df['area'])
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
                        dubai_map = folium.Map(location=[25.2048, 55.2708], zoom_start=11)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é
                        try:
                            from folium.plugins import MarkerCluster
                            marker_cluster = MarkerCluster().add_to(dubai_map)
                        except Exception as cluster_error:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {cluster_error}")
                            # –ï—Å–ª–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –∫–∞—Ä—Ç—É
                            marker_cluster = dubai_map
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
                        for _, row in valid_coords.iterrows():
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–π–æ–Ω–∞
                                area = row.get('area', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                color = area_colors.get(area, '#3186cc')  # –ï—Å–ª–∏ —Ä–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                
                                # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É —Å –Ω—É–∂–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                                icon = folium.Icon(icon="home", prefix="fa", color=color.lstrip('#'))
                                
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
                                popup_text = f"""
                                <b>{row.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b><br>
                                –¶–µ–Ω–∞: {row.get('price', '–ù/–î')} AED<br>
                                –†–∞–π–æ–Ω: {area}<br>
                                –¢–∏–ø: {row.get('property_type', '–ù/–î')}<br>
                                –ü–ª–æ—â–∞–¥—å: {row.get('size', '–ù/–î')} –∫–≤.–º.<br>
                                –°–ø–∞–ª—å–Ω–∏: {row.get('bedrooms', '–ù/–î')}<br>
                                –í–∞–Ω–Ω—ã–µ: {row.get('bathrooms', '–ù/–î')}<br>
                                <a href="?property_id={row.get('id')}" target="_self">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                                """
                                
                                folium.Marker(
                                    location=[row['latitude'], row['longitude']],
                                    popup=folium.Popup(popup_text, max_width=300),
                                    tooltip=f"{row.get('title', '–û–±—ä–µ–∫—Ç')} - {row.get('price', '–ù/–î')} AED",
                                    icon=icon
                                ).add_to(marker_cluster)
                            except Exception as marker_error:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞: {marker_error}")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —Ü–≤–µ—Ç–æ–≤ —Ä–∞–π–æ–Ω–æ–≤
                        legend_html = """
                        <div style="position: fixed; 
                                    bottom: 50px; left: 50px; width: 250px; height: auto;
                                    border:2px solid grey; z-index:9999; font-size:12px;
                                    background-color:white; padding: 10px;
                                    overflow-y: auto; max-height: 300px;">
                            <div style="font-weight: bold; margin-bottom: 5px;">–†–∞–π–æ–Ω—ã:</div>
                        """
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞
                        for area, color in area_colors.items():
                            legend_html += f"""
                            <div style="display: flex; align-items: center; margin-bottom: 3px;">
                                <div style="background-color: {color}; width: 15px; height: 15px; margin-right: 5px;"></div>
                                <div>{area}</div>
                            </div>
                            """
                        
                        legend_html += "</div>"
                        dubai_map.get_root().html.add_child(folium.Element(legend_html))
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
                        try:
                            folium_static(dubai_map, width=1200, height=600)
                            st.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ {len(valid_coords)} –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –¢–æ—á–∫–∏ —Ä–∞—Å–∫—Ä–∞—à–µ–Ω—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º.")
                        except Exception as render_error:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {render_error}")
                    except Exception as map_error:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {map_error}")
                else:
                    st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ")
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã")
        except Exception as e:
            st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã: {e}")
    
    with tab2:
        st.header("–°–∞–º—ã–µ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º")
        st.caption(f"–¢–æ–ø-{top_n} –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–ª–æ—â–∞–¥—å—é –¥–æ {max_size} –∫–≤.–º. –≤ –∫–∞–∂–¥–æ–º —Ä–∞–π–æ–Ω–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º
        cheapest_df = get_cheapest_properties_by_area(top_n=top_n, max_size=max_size)
        
        if cheapest_df is not None and not cheapest_df.empty:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–π–æ–Ω—É –∏ —Ü–µ–Ω–µ
            cheapest_df = cheapest_df.sort_values(['area', 'price'])
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = px.bar(
                cheapest_df,
                x='area',
                y='price',
                color='area',
                hover_data=['title', 'size', 'bedrooms', 'bathrooms'],
                labels={
                    'area': '–†–∞–π–æ–Ω',
                    'price': '–¶–µ–Ω–∞ (AED)',
                    'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                    'size': '–ü–ª–æ—â–∞–¥—å (–∫–≤.–º.)',
                    'bedrooms': '–°–ø–∞–ª—å–Ω–∏',
                    'bathrooms': '–í–∞–Ω–Ω—ã–µ'
                },
                title=f'–¢–æ–ø-{top_n} –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∫–∞–∂–¥–æ–º —Ä–∞–π–æ–Ω–µ'
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞–∫–µ—Ç
            fig.update_layout(xaxis_tickangle=-45)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            st.plotly_chart(fig, use_container_width=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏
            st.subheader("–î–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
            display_columns = ['title', 'area', 'price', 'size', 'bedrooms', 'bathrooms', 'property_type']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
            available_columns = [col for col in display_columns if col in cheapest_df.columns]
            
            st.dataframe(
                cheapest_df[available_columns],
                column_config={
                    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                    "area": "–†–∞–π–æ–Ω",
                    "price": st.column_config.NumberColumn("–¶–µ–Ω–∞ (AED)", format="%.0f"),
                    "size": st.column_config.NumberColumn("–ü–ª–æ—â–∞–¥—å (–∫–≤.–º.)", format="%.1f"),
                    "bedrooms": "–°–ø–∞–ª—å–Ω–∏",
                    "bathrooms": "–í–∞–Ω–Ω—ã–µ",
                    "property_type": "–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
                },
                use_container_width=True
            )
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö")
    
    with tab3:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
            avg_price_by_area_df = get_avg_price_by_area()
            
            if avg_price_by_area_df is not None and not avg_price_by_area_df.empty:
                df_area = avg_price_by_area_df.sort_values(by='avg_price', ascending=False).head(10)
                
                fig = px.bar(
                    df_area, 
                    x='area', 
                    y='avg_price',
                    color='avg_price',
                    labels={'area': '–†–∞–π–æ–Ω', 'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (AED)'},
                    title='–¢–æ–ø-10 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º")
        
        with col2:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
            count_by_type_df = get_count_by_property_type()
            
            if count_by_type_df is not None and not count_by_type_df.empty:
                fig = px.pie(
                    count_by_type_df, 
                    values='count', 
                    names='property_type', 
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    with tab4:
        st.header("–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        st.caption(f"–û–±—ä–µ–∫—Ç—ã –ø–ª–æ—â–∞–¥—å—é –¥–æ {max_size} –∫–≤.–º.")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = st.sidebar.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1)
        limit = st.sidebar.selectbox("–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", [10, 25, 50, 100], index=1)
        offset = (page - 1) * limit
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø–ª–æ—â–∞–¥–∏
        properties_result = get_properties(limit=limit, offset=offset, max_size=max_size)
        
        if properties_result and 'data' in properties_result and properties_result['data'] is not None:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            df_properties = properties_result['data']
            
            if not df_properties.empty:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if 'rooms' in df_properties.columns:
                    df_properties['bedrooms'] = df_properties['rooms']
                if 'baths' in df_properties.columns:
                    df_properties['bathrooms'] = df_properties['baths']
                if 'location' in df_properties.columns:
                    df_properties['area'] = df_properties['location']
                
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_columns = ['id', 'title', 'price', 'area', 'area', 'property_type', 'bedrooms', 'bathrooms']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
                available_columns = [col for col in display_columns if col in df_properties.columns]
                
                df_display = df_properties[available_columns]
                
                st.dataframe(
                    df_display,
                    column_config={
                        "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                        "price": st.column_config.NumberColumn("–¶–µ–Ω–∞ (AED)", format="%.0f"),
                        "area": "–†–∞–π–æ–Ω",
                        "area": st.column_config.NumberColumn("–ü–ª–æ—â–∞–¥—å (–∫–≤.–º.)", format="%.1f"),
                        "property_type": "–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                        "bedrooms": "–°–ø–∞–ª—å–Ω–∏",
                        "bathrooms": "–í–∞–Ω–Ω—ã–µ"
                    },
                    use_container_width=True
                )
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                total_pages = (properties_result['total'] // limit) + (1 if properties_result['total'] % limit > 0 else 0)
                st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(df_properties)} –∏–∑ {properties_result['total']} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}")
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    query_params = st.query_params
    property_id = query_params.get("property_id", None)
    
    if property_id:
        property_details = get_property(property_id)
        if property_details:
            st.subheader(f"–î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞: {property_details.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**–¶–µ–Ω–∞:** {property_details.get('price', '–ù/–î')} AED")
                st.write(f"**–†–∞–π–æ–Ω:** {property_details.get('area', '–ù/–î')}")
                st.write(f"**–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:** {property_details.get('property_type', '–ù/–î')}")
                st.write(f"**–°–ø–∞–ª—å–Ω–∏:** {property_details.get('bedrooms', '–ù/–î')}")
                st.write(f"**–í–∞–Ω–Ω—ã–µ:** {property_details.get('bathrooms', '–ù/–î')}")
            
            with col2:
                st.write(f"**–ü–ª–æ—â–∞–¥—å:** {property_details.get('area', '–ù/–î')} –∫–≤.–º.")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {property_details.get('status', '–ù/–î')}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∫–∞—Ä—Ç—É
                if 'latitude' in property_details and pd.notna(property_details.get('latitude')) and pd.notna(property_details.get('longitude')):
                    property_map = folium.Map(
                        location=[property_details['latitude'], property_details['longitude']], 
                        zoom_start=15
                    )
                    
                    folium.Marker(
                        location=[property_details['latitude'], property_details['longitude']],
                        popup=property_details.get('title', '–û–±—ä–µ–∫—Ç'),
                        icon=folium.Icon(icon="home", prefix="fa")
                    ).add_to(property_map)
                    
                    folium_static(property_map, width=400, height=300)

if __name__ == "__main__":
    main() 