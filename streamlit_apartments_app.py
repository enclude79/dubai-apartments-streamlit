import streamlit as st
import pandas as pd
import numpy as np
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
import psycopg2
import os
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.set_page_config(
    page_title="–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –î—É–±–∞–µ",
    page_icon="üè¢",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def connect_to_db():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(
            dbname=os.getenv("DB_NAME", "postgres"),
            user=os.getenv("DB_USER", "admin"),
            password=os.getenv("DB_PASSWORD", "Enclude79"),
            host=os.getenv("DB_HOST", "localhost"),
            port=os.getenv("DB_PORT", "5432")
        )
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
def parse_geography(geo_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö '–®–∏—Ä–æ—Ç–∞: ..., –î–æ–ª–≥–æ—Ç–∞: ...' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (None, None) –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.
    """
    if not isinstance(geo_str, str):
        return None, None
    try:
        parts = geo_str.replace('–®–∏—Ä–æ—Ç–∞: ', '').replace(' –î–æ–ª–≥–æ—Ç–∞: ', '').split(',')
        if len(parts) == 2:
            lat = float(parts[0].strip())
            lng = float(parts[1].strip())
            return lat, lng
    except (ValueError, IndexError):
        return None, None
    return None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
def fetch_cheapest_apartments_by_region(conn):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ø-3 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–≥–∏–æ–Ω—É —Å –ø–ª–æ—â–∞–¥—å—é –¥–æ 40 –∫–≤.–º.
    """
    query = """
    WITH ranked_apartments AS (
        SELECT 
            id, 
            location, 
            area, 
            price, 
            geography,
            ROW_NUMBER() OVER (PARTITION BY location ORDER BY price ASC) as rank
        FROM bayut_properties
        WHERE area <= 40 AND price > 0
    )
    SELECT 
        id, 
        location, 
        area, 
        price, 
        geography,
        rank
    FROM ranked_apartments
    WHERE rank <= 3
    ORDER BY location, rank
    """
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        df = pd.read_sql_query(query, conn)
        
        if df.empty: 
            st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î.")
            return None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        df[['latitude', 'longitude']] = df['geography'].apply(lambda x: pd.Series(parse_geography(x)))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        df = df.dropna(subset=['latitude', 'longitude'])
        
        # –°–æ–∑–¥–∞–µ–º URL-—Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        df['url'] = df['id'].apply(lambda x: f"https://www.bayut.com/property/{x}/")
        
        return df
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Å Folium
def create_interactive_map(df):
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É, —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    center_lat = df['latitude'].mean()
    center_lon = df['longitude'].mean()
    
    m = folium.Map(location=[center_lat, center_lon], 
                   zoom_start=11, 
                   tiles='CartoDB positron')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    marker_cluster = MarkerCluster().add_to(m)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
    for idx, row in df.iterrows():
        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ (popup) —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        popup_html = f"""
        <div style="width: 200px">
            <h4>{row['location']}</h4>
            <b>–¶–µ–Ω–∞:</b> {int(row['price']):,} AED<br>
            <b>–ü–ª–æ—â–∞–¥—å:</b> {row['area']:.1f} –∫–≤.–º<br>
            <b>–†–µ–π—Ç–∏–Ω–≥:</b> #{row['rank']} –≤ —Ä–µ–≥–∏–æ–Ω–µ<br>
            <a href="{row['url']}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>
        </div>
        """
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞
        color = 'green' if row['rank'] == 1 else 'blue' if row['rank'] == 2 else 'red'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É
        folium.Marker(
            location=[row['latitude'], row['longitude']],
            popup=folium.Popup(popup_html, max_width=300),
            tooltip=f"{row['location']}: {int(row['price']):,} AED",
            icon=folium.Icon(color=color, icon='home', prefix='fa')
        ).add_to(marker_cluster)
    
    return m

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
def create_region_stats(df):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    region_stats = df.groupby('location').agg(
        count=('id', 'count'),
        min_price=('price', 'min'),
        max_price=('price', 'max'),
        avg_price=('price', 'mean')
    ).reset_index()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
    region_stats = region_stats.sort_values('min_price')
    
    return region_stats

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.title("üè¢ –¢–æ–ø-3 —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –î—É–±–∞—è")
    st.caption(f"–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y')}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = connect_to_db()
    if not conn:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        apartments_data = fetch_cheapest_apartments_by_region(conn)
    
    if apartments_data is None or apartments_data.empty:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    conn.close()
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤—É—Ö–∫–æ–ª–æ–Ω–æ—á–Ω—ã–π –º–∞–∫–µ—Ç
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
        st.subheader("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞")
        st.caption("–ú–∞—Ä–∫–µ—Ä—ã: üü¢ - —Å–∞–º–∞—è –¥–µ—à–µ–≤–∞—è, üîµ - –≤—Ç–æ—Ä–∞—è –ø–æ —Ü–µ–Ω–µ, üî¥ - —Ç—Ä–µ—Ç—å—è –ø–æ —Ü–µ–Ω–µ")
        
        folium_map = create_interactive_map(apartments_data)
        st_folium(folium_map, width=800, height=500)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π
        with st.expander("–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π"):
            st.markdown("""
            - **–£–≤–µ–ª–∏—á–∏—Ç—å/—É–º–µ–Ω—å—à–∏—Ç—å –º–∞—Å—à—Ç–∞–±**: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ + –∏ - –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            - **–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—Ç–µ**: —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –∫–∞—Ä—Ç—É
            - **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ**: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            - **–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ**: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É "–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ" –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ
            """)
    
    with col2:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
        st.subheader("–¢–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏")
        
        region_stats = create_region_stats(apartments_data)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏
        for i, row in region_stats.head(10).iterrows():
            with st.container():
                st.markdown(f"**{i+1}. {row['location']}**")
                st.markdown(f"–ú–∏–Ω. —Ü–µ–Ω–∞: **{int(row['min_price']):,} AED**")
                st.markdown(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {int(row['avg_price']):,} AED")
                st.markdown("---")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    st.subheader("–í—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    table_data = apartments_data[['location', 'price', 'area', 'rank', 'url']].copy()
    table_data['price'] = table_data['price'].apply(lambda x: f"{int(x):,} AED")
    table_data['area'] = table_data['area'].apply(lambda x: f"{x:.1f} –∫–≤.–º")
    table_data['rank'] = table_data['rank'].apply(lambda x: f"#{x}")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    table_data.columns = ['–†–µ–≥–∏–æ–Ω', '–¶–µ–Ω–∞', '–ü–ª–æ—â–∞–¥—å', '–†–µ–π—Ç–∏–Ω–≥', '–°—Å—ã–ª–∫–∞']
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    table_data['–°—Å—ã–ª–∫–∞'] = table_data['–°—Å—ã–ª–∫–∞'].apply(lambda x: f'<a href="{x}" target="_blank">–ü–µ—Ä–µ–π—Ç–∏</a>')
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    st.dataframe(
        table_data,
        column_config={
            "–°—Å—ã–ª–∫–∞": st.column_config.LinkColumn()
        },
        hide_index=True,
        use_container_width=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    st.markdown("---")
    st.caption("¬© 2025 Wealth Compass | –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –î—É–±–∞–µ")

if __name__ == "__main__":
    main() 