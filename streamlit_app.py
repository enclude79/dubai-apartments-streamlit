import streamlit as st
import pandas as pd
import requests
import folium
from streamlit_folium import folium_static
import plotly.express as px
import plotly.graph_objects as go
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API
API_URL = os.getenv("API_URL", "http://localhost:8000")

st.set_page_config(
    page_title="Dubai Property Analysis",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
@st.cache_data(ttl=300) # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def fetch_data(endpoint, params=None):
    try:
        response = requests.get(f"{API_URL}{endpoint}", params=params)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return None

def main():
    st.title("–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –î—É–±–∞–µ")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["–ö–∞—Ä—Ç–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤"])
    
    with tab1:
        st.header("–ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
        map_data = fetch_data("/api/map_data")
        
        if map_data:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
            dubai_map = folium.Map(location=[25.2048, 55.2708], zoom_start=11)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
            for item in map_data:
                if item.get('latitude') and item.get('longitude'):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
                    popup_text = f"""
                    <b>{item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b><br>
                    –¶–µ–Ω–∞: {item.get('price', '–ù/–î')} AED<br>
                    –†–∞–π–æ–Ω: {item.get('area', '–ù/–î')}<br>
                    –¢–∏–ø: {item.get('property_type', '–ù/–î')}<br>
                    <a href="?property_id={item.get('id')}" target="_blank">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                    """
                    
                    folium.Marker(
                        location=[item['latitude'], item['longitude']],
                        popup=folium.Popup(popup_text, max_width=300),
                        tooltip=f"{item.get('title', '–û–±—ä–µ–∫—Ç')} - {item.get('price', '–ù/–î')} AED",
                        icon=folium.Icon(icon="home", prefix="fa")
                    ).add_to(dubai_map)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
            folium_static(dubai_map, width=1200, height=600)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã")
    
    with tab2:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
            avg_price_by_area = fetch_data("/api/stats/avg_price_by_area")
            
            if avg_price_by_area:
                df_area = pd.DataFrame(avg_price_by_area)
                df_area = df_area.sort_values(by='avg_price', ascending=False).head(10)
                
                fig = px.bar(
                    df_area, 
                    x='area', 
                    y='avg_price',
                    color='avg_price',
                    labels={'area': '–†–∞–π–æ–Ω', 'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (AED)'},
                    title='–¢–æ–ø-10 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º")
        
        with col2:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
            count_by_type = fetch_data("/api/stats/count_by_property_type")
            
            if count_by_type:
                df_type = pd.DataFrame(count_by_type)
                
                fig = px.pie(
                    df_type, 
                    values='count', 
                    names='property_type', 
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    with tab3:
        st.header("–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = st.sidebar.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1)
        limit = st.sidebar.selectbox("–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", [10, 25, 50, 100], index=1)
        offset = (page - 1) * limit
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        properties = fetch_data("/api/properties", params={"limit": limit, "offset": offset})
        
        if properties and 'data' in properties:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            df_properties = pd.DataFrame(properties['data'])
            
            if not df_properties.empty:
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_columns = ['id', 'title', 'price', 'area', 'property_type', 'bedrooms', 'bathrooms']
                df_display = df_properties[display_columns] if all(col in df_properties.columns for col in display_columns) else df_properties
                
                st.dataframe(df_display, use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(properties['data'])} –∏–∑ {properties['total']} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {(properties['total'] // limit) + 1}")
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    property_id = st.query_params.get("property_id")
    if property_id:
        property_details = fetch_data(f"/api/properties/{property_id}")
        if property_details:
            st.subheader(f"–î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞: {property_details.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**–¶–µ–Ω–∞:** {property_details.get('price', '–ù/–î')} AED")
                st.write(f"**–†–∞–π–æ–Ω:** {property_details.get('area', '–ù/–î')}")
                st.write(f"**–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:** {property_details.get('property_type', '–ù/–î')}")
                st.write(f"**–°–ø–∞–ª—å–Ω–∏:** {property_details.get('bedrooms', '–ù/–î')}")
                st.write(f"**–í–∞–Ω–Ω—ã–µ:** {property_details.get('bathrooms', '–ù/–î')}")
            
            with col2:
                st.write(f"**–ü–ª–æ—â–∞–¥—å:** {property_details.get('size', '–ù/–î')} –∫–≤.–º.")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {property_details.get('status', '–ù/–î')}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∫–∞—Ä—Ç—É
                if property_details.get('latitude') and property_details.get('longitude'):
                    property_map = folium.Map(
                        location=[property_details['latitude'], property_details['longitude']], 
                        zoom_start=15
                    )
                    
                    folium.Marker(
                        location=[property_details['latitude'], property_details['longitude']],
                        popup=property_details.get('title', '–û–±—ä–µ–∫—Ç'),
                        icon=folium.Icon(icon="home", prefix="fa")
                    ).add_to(property_map)
                    
                    folium_static(property_map, width=400, height=300)

if __name__ == "__main__":
    main() 