"""
Файл с промтом для LangChain SQL для поиска трех самых дешевых квартир в каждой локации
"""

# Промт для нахождения 3 самых дешевых квартир площадью до 40 кв.м. в каждой локации
CHEAPEST_APARTMENTS_BY_LOCATION_PROMPT = """
Ты опытный SQL-разработчик, специализирующийся на PostgreSQL. Я хочу, чтобы ты помог мне найти 
в каждой локации три самых дешевых квартиры с площадью до 40 квадратных метров из базы данных недвижимости.

Вот структура таблицы bayut_properties в моей базе данных:
- id: INTEGER - уникальный идентификатор объекта
- "Unnamed: 1": TEXT - название/описание недвижимости
- "Unnamed: 2": NUMERIC - цена объекта в AED
- "Unnamed: 3": INTEGER - количество спален
- "Unnamed: 4": INTEGER - количество ванных комнат
- "Unnamed: 5": NUMERIC - площадь в квадратных метрах
- "Unnamed: 7": TEXT - информация о местоположении в JSON формате
- "Unnamed: 8": TEXT - URL изображения
- "Unnamed: 9": TEXT - URL объявления
- "Unnamed: 10": TEXT - тип недвижимости (Residential)
- "Unnamed: 15": TEXT - статус (completed/under-construction)
- "Unnamed: 16": TEXT - удобства
- "Unnamed: 18": TEXT - название агентства недвижимости
- "Unnamed: 20": TEXT - географические координаты

Особенности данных:
1. Поле "Unnamed: 7" содержит информацию о местоположении в формате JSON массива. 
   Каждый элемент массива представляет уровень локации (страна, город, район и т.д.).
   Например: [{'id': 1, 'level': 0, 'name': 'UAE'}, {'id': 2, 'level': 1, 'name': 'Dubai'}, 
              {'id': 54, 'level': 2, 'name': 'Business Bay', 'type': 'neighbourhood'}]
   
2. Мне нужно извлечь название района из этой структуры JSON. 
   Районы обычно помечены как 'type': 'neighbourhood' или имеют 'level': 2.

3. Нужно найти только объекты с площадью до 40 кв.м. (поле "Unnamed: 5").

Напиши SQL-запрос, который:
1. Извлечет из JSON в поле "Unnamed: 7" название района (neighbourhood)
2. Отфильтрует объекты с площадью не более 40 кв.м.
3. Для каждого района найдет 3 самых дешевых объекта
4. Вернет следующие данные для каждого объекта:
   - id
   - "Unnamed: 1" как title (название)
   - "Unnamed: 2" как price (цена)
   - "Unnamed: 3" как bedrooms (спальни)
   - "Unnamed: 5" как area (площадь)
   - Извлеченное название района как neighborhood

Обрати внимание:
- Используй Common Table Expressions (WITH) для лучшей читаемости
- Применяй оконные функции (ROW_NUMBER) для ранжирования объектов по цене внутри каждого района
- Для извлечения данных из JSON используй функции PostgreSQL для работы с JSON
- Обеспечь правильное форматирование и отступы в SQL-запросе

Пожалуйста, напиши только SQL-запрос, без объяснений до или после него.
"""

# Промт для нахождения 3 самых дешевых квартир, оптимизированный под работу с данными JSON
CHEAPEST_APARTMENTS_JSON_OPTIMIZED_PROMPT = """
Ты эксперт по PostgreSQL и работе с JSON в SQL. Напиши SQL-запрос для нахождения 
трех самых дешевых квартир площадью до 40 кв.м. в каждой локации (районе).

## Структура таблицы bayut_properties:
- id: INTEGER - ID объекта
- "Unnamed: 1": TEXT - название объекта
- "Unnamed: 2": NUMERIC - цена
- "Unnamed: 3": INTEGER - спальни
- "Unnamed: 5": NUMERIC - площадь (кв.м.)
- "Unnamed: 7": TEXT - JSON с данными о местоположении

## Пример содержимого поля "Unnamed: 7" (JSON с местоположением):
```
[
  {"id": 1, "level": 0, "externalID": "5001", "name": "UAE"},
  {"id": 2, "level": 1, "externalID": "5002", "name": "Dubai"},
  {"id": 54, "level": 2, "externalID": "5093", "name": "Business Bay", "type": "neighbourhood"},
  {"id": 3517, "level": 3, "externalID": "11881", "name": "Urban Oasis by Missoni"}
]
```

## Требования к запросу:
1. Извлеки название района ('neighbourhood') из JSON в "Unnamed: 7" используя функции JSON в PostgreSQL
2. Отфильтруй квартиры с площадью <= 40 кв.м.
3. Получи 3 самых дешевых квартиры для каждого района
4. Используй оконные функции (ROW_NUMBER) для ранжирования
5. Верни поля: id, title, price, bedrooms, area, neighborhood
6. Отсортируй результат по району и цене

## Техническая реализация:
- Используй jsonb_array_elements для обработки JSON массива
- Используй CTE для пошаговой обработки данных
- Используй ROW_NUMBER() для ранжирования квартир в каждом районе

Верни только SQL-запрос, без пояснений.
"""

# Промт для создания скрипта LangChain для работы с базой данных недвижимости
LANGCHAIN_SQL_INTEGRATION_PROMPT = """
Напиши Python скрипт, который использует LangChain для генерации SQL-запросов к базе данных недвижимости.
Скрипт должен:

1. Использовать LangChain и OpenAI для генерации SQL-запроса на основе промта
2. Подключаться к PostgreSQL базе данных и выполнять сгенерированный запрос
3. Обрабатывать результаты запроса и представлять их в удобном формате

Основная задача - найти в каждой локации 3 самых дешевых квартиры площадью до 40 кв.м.

Вот необходимые библиотеки и настройки:
- langchain для работы с LLM и SQL
- psycopg2 для подключения к PostgreSQL
- pandas для обработки данных

Структура скрипта должна включать:
- Подключение к базе данных
- Создание LLM цепочки для генерации SQL
- Выполнение запроса и обработка результатов
- Вывод результатов в структурированном виде

Промт для LLM должен объяснять структуру таблицы и особенности данных (особенно JSON поля с местоположением).
""" 