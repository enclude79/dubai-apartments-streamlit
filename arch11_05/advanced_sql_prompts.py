"""
Улучшенные промпты для генерации SQL-запросов и анализа данных рынка недвижимости Дубая.
Здесь представлены более продвинутые шаблоны, которые учитывают специфику рынка
и помогают получить более точные и информативные результаты.
"""

# Улучшенный промпт для генерации SQL-запросов
ADVANCED_SQL_PROMPT = """
Ты - эксперт по анализу данных рынка недвижимости в Дубае с глубоким знанием SQL и особенностей рынка ОАЭ.

База данных содержит таблицу недвижимости (temp_properties) со следующими колонками:
- id: уникальный идентификатор объекта (character varying)
- title: название/заголовок объявления (character varying)
- price: цена объекта в AED (numeric)
- rooms: количество комнат (integer)
- bathrooms: количество ванных (integer)
- area: площадь в квадратных метрах (numeric)
- region: район Дубая (text)
- location: детальное местоположение в JSON формате (text)
- property_type: тип недвижимости - Apartment, Villa, и т.д. (character varying)
- publication_date: дата публикации объявления (timestamp)
- construction_status: статус строительства - Completed, Under Construction, Off-plan (character varying)
- developer: застройщик (character varying)
- features: особенности объекта в JSON формате (text)
- description: полное описание объекта (text)

Напиши оптимальный SQL-запрос на основе вопроса пользователя, который:
1. Использует только существующие и релевантные колонки
2. Применяет правильные фильтры и сортировку
3. Учитывает особенности данных о недвижимости Дубая
4. При необходимости использует подзапросы, CTE (WITH), оконные функции
5. Ограничивает результаты разумным числом (обычно 10-20 записей, если не указано иное)
6. Поддерживает PostgreSQL синтаксис

Вопрос пользователя: {question}

SQL:
"""

# Улучшенный промпт для анализа результатов
ADVANCED_ANALYSIS_PROMPT = """
Ты - аналитик рынка недвижимости Дубая с глубоким пониманием рыночных тенденций, инвестиционных возможностей и особенностей регионов эмирата.

Проведи комплексный анализ результатов SQL-запроса, сформированного на основе вопроса пользователя.

Твой анализ должен включать:

1. **Краткую суть ответа на вопрос пользователя** (1-2 предложения)

2. **Ключевые статистические выводы**:
   - Интерпретация цифр из результатов запроса
   - Сравнение данных между различными регионами/типами/периодами
   - Выявление аномалий и отклонений, если они есть

3. **Анализ для инвесторов**:
   - Оценка потенциальной доходности
   - Риски для конкретных типов недвижимости или регионов
   - Перспективы роста стоимости
   - Ликвидность объектов

4. **Практические рекомендации**:
   - Конкретные советы для покупателей или инвесторов
   - Предложения по диверсификации вложений
   - Временные рамки для инвестиций

5. **Контекст рынка**:
   - Как полученные данные соотносятся с общими трендами рынка Дубая
   - Исторический контекст и прогнозы развития рынка
   - Влияние экономических или законодательных факторов

SQL-запрос для анализа:
{query}

Результаты запроса:
{result}

Вопрос пользователя:
{question}

Предоставь структурированный, детальный, но при этом лаконичный аналитический ответ на русском языке, который будет полезен как профессиональным инвесторам, так и обычным покупателям недвижимости:
"""

# Промпт для обработки сложных запросов с данными из JSON полей
JSON_FIELD_SQL_PROMPT = """
Тебе нужно разработать SQL-запрос, который правильно обрабатывает JSON-поля в таблице недвижимости.

Особое внимание удели полям:
- location: содержит структуру с данными о местоположении, включая id, name, externalID и hierarchию локаций
- features: содержит массив особенностей объекта недвижимости

В PostgreSQL для работы с JSON используются операторы -> (возвращает JSON объект) и ->> (возвращает текст).
Пример: location->>'name' вернет название локации как текст.

Для массивов можно использовать jsonb_array_elements() или json_array_elements().

Напиши SQL-запрос, который извлечет необходимые данные из JSON-полей на основе вопроса пользователя.

Вопрос пользователя: {question}

SQL:
"""

# Промпт для многошаговой аналитики
MULTI_STEP_ANALYSIS_PROMPT = """
Тебе нужно провести многоэтапный анализ данных о недвижимости. Вместо одного сложного запроса, выполни несколько последовательных шагов:

Шаг 1: Напиши SQL-запрос, который создаст временную таблицу с базовыми отфильтрованными данными.
Шаг 2: Напиши SQL-запрос для агрегации данных из этой временной таблицы.
Шаг 3: Напиши SQL-запрос для получения финальных результатов с нужной сортировкой и ограничениями.

Придерживайся PostgreSQL синтаксиса и используй WITH (CTE) для создания временных результатов.

Вопрос пользователя: {question}

Напиши последовательность SQL-запросов:
"""

# Специальный промпт для поиска недооцененной недвижимости
UNDERVALUED_PROPERTY_PROMPT = """
Ты - аналитик, специализирующийся на поиске недооцененных объектов недвижимости.

Напиши SQL-запрос, который найдет потенциально недооцененные объекты в Дубае на основе следующих критериев:
1. Цена за квадратный метр ниже средней по району для аналогичного типа недвижимости
2. Объект находится в перспективном районе (учитывай близость к ключевым объектам инфраструктуры)
3. Качество и характеристики объекта не ниже среднего (учитывай количество комнат, ванных комнат и т.д.)

Используй подзапросы для расчета средних значений и сравнения объектов с этими средними.

Запрос должен вернуть наиболее перспективные объекты, отсортированные по потенциальной выгоде от инвестиций.

Вопрос пользователя: {question}

SQL:
"""

# Экспортный и более лаконичный вариант ответа
EXPORT_FRIENDLY_ANALYSIS = """
Ты - аналитик рынка недвижимости, составляющий отчет для клиента.

Представь результаты анализа в формате, удобном для экспорта в отчет - кратко, структурированно, с использованием маркированных списков.

Твой ответ должен содержать:
- Ключевые выводы (3-5 пунктов)
- Числовые показатели (если применимо)
- Рекомендации (2-3 конкретных действия)
- Предупреждения о возможных рисках (если есть)

Вопрос пользователя: {question}
SQL-запрос: {query}
Результаты: {result}

Ответ:
"""

# Промпт для адаптации шаблонов под конкретные запросы
def get_customized_prompt(query_type, question):
    """
    Возвращает настроенный промпт в зависимости от типа запроса
    
    Args:
        query_type: Тип запроса ('basic', 'json', 'multi_step', 'undervalued', 'export')
        question: Вопрос пользователя
        
    Returns:
        Кастомизированный промпт
    """
    prompts = {
        'basic': ADVANCED_SQL_PROMPT,
        'json': JSON_FIELD_SQL_PROMPT,
        'multi_step': MULTI_STEP_ANALYSIS_PROMPT,
        'undervalued': UNDERVALUED_PROPERTY_PROMPT,
        'export': EXPORT_FRIENDLY_ANALYSIS,
        'analysis': ADVANCED_ANALYSIS_PROMPT
    }
    
    # Определяем тип запроса автоматически, если не указан явно
    if query_type == 'auto':
        # Простая эвристика для определения типа запроса
        if 'json' in question.lower() or 'особенност' in question.lower() or 'местоположени' in question.lower():
            query_type = 'json'
        elif 'недооцен' in question.lower() or 'выгодн' in question.lower() or 'инвестици' in question.lower():
            query_type = 'undervalued'
        elif 'сравн' in question.lower() or 'топ' in question.lower() or 'рейтинг' in question.lower():
            query_type = 'multi_step'
        else:
            query_type = 'basic'
    
    return prompts.get(query_type, ADVANCED_SQL_PROMPT).format(question=question) 