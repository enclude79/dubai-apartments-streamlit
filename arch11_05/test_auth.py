import requests
import logging
from dotenv import load_dotenv
import os
from openai import OpenAI
import telebot
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    try:
        load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        api_key = os.getenv('OPENROUTER_API_KEY')
        if not api_key:
            print("API: ‚ùå –û—à–∏–±–∫–∞: OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False

        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=api_key
        )

        response = client.chat.completions.create(
            extra_headers={
                "HTTP-Referer": "https://wealthcompas.com",
                "X-Title": "WealthCompas News Bot",
            },
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": "Say hello!"}
            ]
        )

        print("API: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"–û—Ç–≤–µ—Ç API: {response.choices[0].message.content}")
        return True
    except Exception as e:
        print(f"API: ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    try:
        load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            print("Telegram: ‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        bot = telebot.TeleBot(bot_token)
        bot_info = bot.get_me()
        print(f"Telegram: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        print(f"ID –±–æ—Ç–∞: {bot_info.id}")
        print(f"–ò–º—è –±–æ—Ç–∞: {bot_info.username}")
        print(f"–ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º: {bot_info.can_join_groups}")
        print(f"–ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {bot_info.can_read_all_group_messages}")
        return True
    except Exception as e:
        print(f"Telegram: ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    logger.info("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
    api_success = test_api_connection()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram
    logger.info("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram...")
    telegram_success = test_telegram_connection()
    
    # –í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    logger.info("\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    logger.info(f"API: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if api_success else '‚ùå –û—à–∏–±–∫–∞'}")
    logger.info(f"Telegram: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if telegram_success else '‚ùå –û—à–∏–±–∫–∞'}")

if __name__ == "__main__":
    main() 