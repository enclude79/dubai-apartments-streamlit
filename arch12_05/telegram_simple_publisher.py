import os
import psycopg2
import logging
import asyncio
import aiohttp
from datetime import datetime
import json
import textwrap

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)
log_filename = f'{log_dir}/telegram_publisher_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': 'postgres',
    'user': 'admin',
    'password': 'Enclude79',
    'host': 'localhost',
    'port': '5432'
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN', '6910359575:AAEZAZIFa2YmYG5_9XZtvimxX0ZSl3uBCqo')
CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '-1002129200860')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_cheapest_apartments(limit=10, max_price=3000000):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = None
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        conn.set_client_encoding('UTF8')
        cursor = conn.cursor()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.views 
                WHERE table_name = 'bayut_api_view'
            )
        """)
        
        view_exists = cursor.fetchone()[0]
        table_name = 'bayut_api_view' if view_exists else 'bayut_properties'
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä
        query = f"""
            SELECT 
                id, 
                title, 
                price, 
                rooms, 
                baths, 
                area, 
                rent_frequency,
                location, 
                property_url
            FROM {table_name}
            WHERE price > 0 AND price <= %s
            ORDER BY price
            LIMIT %s
        """
        
        cursor.execute(query, (max_price, limit))
        apartments = cursor.fetchall()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        columns = ['id', 'title', 'price', 'rooms', 'baths', 'area', 
                  'rent_frequency', 'location', 'property_url']
        result = []
        
        for apartment in apartments:
            result.append(dict(zip(columns, apartment)))
        
        cursor.close()
        return result
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
        return []
    finally:
        if conn:
            conn.close()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_telegram_message(text, disable_web_page_preview=False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': CHAT_ID,
        'text': text,
        'parse_mode': 'HTML',
        'disable_web_page_preview': disable_web_page_preview
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response.status}, {error_text}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        return False

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
def format_apartment_message(apartment):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –¥–ª—è Telegram"""
    title = apartment.get('title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')
    price = apartment.get('price', 0)
    rooms = apartment.get('rooms', 0)
    baths = apartment.get('baths', 0)
    area = apartment.get('area', 0)
    location = apartment.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    url = apartment.get('property_url', '#')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"""
<b>üè¢ {title}</b>

üí∞ <b>–¶–µ–Ω–∞:</b> {price:,} AED
üõèÔ∏è <b>–ö–æ–º–Ω–∞—Ç:</b> {rooms}
üöø <b>–í–∞–Ω–Ω—ã—Ö:</b> {baths}
üìè <b>–ü–ª–æ—â–∞–¥—å:</b> {area} –∫–≤.–º.
üìç <b>–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {location}

<a href="{url}">–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ</a>
"""
    return message.strip()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def send_apartments_batch(apartments, delay=2):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –ø–æ—Ä—Ü–∏—è–º–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    if not apartments:
        logger.warning("–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return False
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üè† <b>–¢–æ–ø-{len(apartments)} —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ –î—É–±–∞–µ</b> üå¥\n\n"
    await send_telegram_message(header)
    await asyncio.sleep(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ
    for apartment in apartments:
        message = format_apartment_message(apartment)
        success = await send_telegram_message(message)
        
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ {apartment.get('id')}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(delay)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—É—Ç–µ—Ä
    footer = "\n<i>–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã WealthCompass</i>"
    await send_telegram_message(footer)
    
    return True

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def publish_to_telegram():
    """–ü—É–±–ª–∏–∫—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –≤ Telegram"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ Telegram")
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –≤ Telegram")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—à–µ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    apartments = get_cheapest_apartments(limit=10, max_price=5000000)
    
    if not apartments:
        message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await send_telegram_message(message)
        logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        return False
    
    # –ü—É–±–ª–∏–∫—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –≤ Telegram
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(apartments)} –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(apartments)} –¥–µ—à–µ–≤—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    
    success = await send_apartments_batch(apartments)
    
    if success:
        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        print("–ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
    else:
        logger.error("–ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        return False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        await publish_to_telegram()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 