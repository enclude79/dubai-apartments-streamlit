import streamlit as st
import pandas as pd
import sqlite3
import folium
from streamlit_folium import folium_static
import plotly.express as px
import plotly.graph_objects as go
import os
from datetime import datetime

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
SQLITE_DB_PATH = "dubai_properties.db"

st.set_page_config(
    page_title="Dubai Property Analysis",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SQLite
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""
    try:
        conn = sqlite3.connect(SQLITE_DB_PATH)
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def execute_query(query, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ DataFrame"""
    try:
        conn = get_db_connection()
        if conn is None:
            return None
        
        if params:
            df = pd.read_sql_query(query, conn, params=params)
        else:
            df = pd.read_sql_query(query, conn)
        
        conn.close()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def get_properties(limit=100, offset=0):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = "SELECT * FROM properties ORDER BY id LIMIT ? OFFSET ?"
    df = execute_query(query, params=(limit, offset))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    count_df = execute_query("SELECT COUNT(*) as total FROM properties")
    total_count = count_df.iloc[0]['total'] if count_df is not None else 0
    
    return {
        "data": df,
        "total": total_count,
        "limit": limit,
        "offset": offset
    }

def get_property(property_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ ID"""
    query = "SELECT * FROM properties WHERE id = ?"
    df = execute_query(query, params=(property_id,))
    
    if df is not None and not df.empty:
        return df.iloc[0].to_dict()
    
    return None

def get_avg_price_by_area():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ —Ä–∞–π–æ–Ω–∞–º"""
    query = """
    SELECT area, AVG(price) as avg_price, COUNT(*) as count
    FROM properties
    GROUP BY area
    ORDER BY avg_price DESC
    """
    return execute_query(query)

def get_count_by_property_type():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    query = """
    SELECT property_type, COUNT(*) as count
    FROM properties
    GROUP BY property_type
    ORDER BY count DESC
    """
    return execute_query(query)

def get_map_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ"""
    query = """
    SELECT id, title, price, area, property_type, latitude, longitude 
    FROM properties
    WHERE latitude IS NOT NULL AND longitude IS NOT NULL
    """
    return execute_query(query)

def main():
    st.title("–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –î—É–±–∞–µ")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_exists = os.path.isfile(SQLITE_DB_PATH)
    if db_exists:
        db_size = os.path.getsize(SQLITE_DB_PATH) / (1024 * 1024)  # –†–∞–∑–º–µ—Ä –≤ –ú–ë
        db_modified = datetime.fromtimestamp(os.path.getmtime(SQLITE_DB_PATH))
        st.sidebar.info(
            f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {SQLITE_DB_PATH}\n"
            f"–†–∞–∑–º–µ—Ä: {db_size:.2f} –ú–ë\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {db_modified.strftime('%d.%m.%Y %H:%M')}"
        )
    else:
        st.sidebar.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {SQLITE_DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        st.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {SQLITE_DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    # –ì–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3 = st.tabs(["–ö–∞—Ä—Ç–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤"])
    
    with tab1:
        st.header("–ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
        map_data_df = get_map_data()
        
        if map_data_df is not None and not map_data_df.empty:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π
            dubai_map = folium.Map(location=[25.2048, 55.2708], zoom_start=11)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
            for _, row in map_data_df.iterrows():
                if pd.notna(row['latitude']) and pd.notna(row['longitude']):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
                    popup_text = f"""
                    <b>{row.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b><br>
                    –¶–µ–Ω–∞: {row.get('price', '–ù/–î')} AED<br>
                    –†–∞–π–æ–Ω: {row.get('area', '–ù/–î')}<br>
                    –¢–∏–ø: {row.get('property_type', '–ù/–î')}<br>
                    <a href="?property_id={row.get('id')}" target="_blank">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                    """
                    
                    folium.Marker(
                        location=[row['latitude'], row['longitude']],
                        popup=folium.Popup(popup_text, max_width=300),
                        tooltip=f"{row.get('title', '–û–±—ä–µ–∫—Ç')} - {row.get('price', '–ù/–î')} AED",
                        icon=folium.Icon(icon="home", prefix="fa")
                    ).add_to(dubai_map)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
            folium_static(dubai_map, width=1200, height=600)
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã")
    
    with tab2:
        st.header("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
            avg_price_by_area_df = get_avg_price_by_area()
            
            if avg_price_by_area_df is not None and not avg_price_by_area_df.empty:
                df_area = avg_price_by_area_df.sort_values(by='avg_price', ascending=False).head(10)
                
                fig = px.bar(
                    df_area, 
                    x='area', 
                    y='avg_price',
                    color='avg_price',
                    labels={'area': '–†–∞–π–æ–Ω', 'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (AED)'},
                    title='–¢–æ–ø-10 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞–π–æ–Ω–∞–º")
        
        with col2:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É
            count_by_type_df = get_count_by_property_type()
            
            if count_by_type_df is not None and not count_by_type_df.empty:
                fig = px.pie(
                    count_by_type_df, 
                    values='count', 
                    names='property_type', 
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    
    with tab3:
        st.header("–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        page = st.sidebar.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1)
        limit = st.sidebar.selectbox("–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", [10, 25, 50, 100], index=1)
        offset = (page - 1) * limit
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        properties_result = get_properties(limit=limit, offset=offset)
        
        if properties_result and 'data' in properties_result and properties_result['data'] is not None:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            df_properties = properties_result['data']
            
            if not df_properties.empty:
                # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_columns = ['id', 'title', 'price', 'area', 'property_type', 'bedrooms', 'bathrooms']
                df_display = df_properties[display_columns] if all(col in df_properties.columns for col in display_columns) else df_properties
                
                st.dataframe(df_display, use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                total_pages = (properties_result['total'] // limit) + (1 if properties_result['total'] % limit > 0 else 0)
                st.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ {len(df_properties)} –∏–∑ {properties_result['total']} –æ–±—ä–µ–∫—Ç–æ–≤. –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}")
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    query_params = st.experimental_get_query_params()
    property_id = query_params.get("property_id", [None])[0]
    
    if property_id:
        property_details = get_property(property_id)
        if property_details:
            st.subheader(f"–î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞: {property_details.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**–¶–µ–Ω–∞:** {property_details.get('price', '–ù/–î')} AED")
                st.write(f"**–†–∞–π–æ–Ω:** {property_details.get('area', '–ù/–î')}")
                st.write(f"**–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:** {property_details.get('property_type', '–ù/–î')}")
                st.write(f"**–°–ø–∞–ª—å–Ω–∏:** {property_details.get('bedrooms', '–ù/–î')}")
                st.write(f"**–í–∞–Ω–Ω—ã–µ:** {property_details.get('bathrooms', '–ù/–î')}")
            
            with col2:
                st.write(f"**–ü–ª–æ—â–∞–¥—å:** {property_details.get('size', '–ù/–î')} –∫–≤.–º.")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {property_details.get('status', '–ù/–î')}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –∫–∞—Ä—Ç—É
                if pd.notna(property_details.get('latitude')) and pd.notna(property_details.get('longitude')):
                    property_map = folium.Map(
                        location=[property_details['latitude'], property_details['longitude']], 
                        zoom_start=15
                    )
                    
                    folium.Marker(
                        location=[property_details['latitude'], property_details['longitude']],
                        popup=property_details.get('title', '–û–±—ä–µ–∫—Ç'),
                        icon=folium.Icon(icon="home", prefix="fa")
                    ).add_to(property_map)
                    
                    folium_static(property_map, width=400, height=300)

if __name__ == "__main__":
    main() 