import streamlit as st
import pandas as pd
import sqlite3
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static
import plotly.express as px
import plotly.graph_objects as go
import os
from datetime import datetime
import colorsys
import re
import traceback

# –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
SQLITE_DB_PATH = "dubai_properties.db"

st.set_page_config(
    page_title="Dubai Property Analysis",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SQLite
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite"""
    try:
        conn = sqlite3.connect(SQLITE_DB_PATH)
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def execute_query(query, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ DataFrame"""
    try:
        conn = get_db_connection()
        if conn is None:
            return None
        
        if params:
            df = pd.read_sql_query(query, conn, params=params)
        else:
            df = pd.read_sql_query(query, conn)
        
        conn.close()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def extract_coordinates(geo_str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ '–®–∏—Ä–æ—Ç–∞: X, –î–æ–ª–≥–æ—Ç–∞: Y'"""
    if not isinstance(geo_str, str):
        return None, None
    
    lat_pattern = r'–®–∏—Ä–æ—Ç–∞:\s*([\d\.]+)'
    lng_pattern = r'–î–æ–ª–≥–æ—Ç–∞:\s*([\d\.]+)'
    
    lat_match = re.search(lat_pattern, geo_str)
    lng_match = re.search(lng_pattern, geo_str)
    
    # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float
    try:
        lat = float(lat_match.group(1)) if lat_match else None
        lng = float(lng_match.group(1)) if lng_match else None
    except (ValueError, TypeError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}, –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: {geo_str}")
        return None, None
    
    return lat, lng

def get_properties(limit=100, offset=0, max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    base_query = "SELECT * FROM properties"
    
    conditions = []
    params = []
    
    if max_size is not None:
        conditions.append("area <= ?")
        params.append(max_size)
    
    if conditions:
        base_query += " WHERE " + " AND ".join(conditions)
    
    query = base_query + " ORDER BY id LIMIT ? OFFSET ?"
    params.extend([limit, offset])
    
    df = execute_query(query, params=tuple(params))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    count_query = "SELECT COUNT(*) as total FROM properties"
    if conditions:
        count_query += " WHERE " + " AND ".join(conditions)
    
    count_df = execute_query(count_query, params=tuple(params[:-2]) if params[:-2] else None)
    total_count = count_df.iloc[0]['total'] if count_df is not None else 0
    
    return {
        "data": df,
        "total": total_count,
        "limit": limit,
        "offset": offset
    }

def get_cheapest_properties_by_area(top_n=3, min_size=None, max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —Ä–∞–π–æ–Ω–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    query = """
    WITH RankedProperties AS (
        SELECT 
            id, title, price, location, property_type, area, rooms, baths, geography,  -- –Ø–≤–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            ROW_NUMBER() OVER (PARTITION BY location ORDER BY price) as price_rank
        FROM properties
        WHERE 1=1 
    """
    
    params = []
    if min_size is not None:
        query += " AND area >= ?" # area –∑–¥–µ—Å—å - —ç—Ç–æ –ø–ª–æ—â–∞–¥—å –∏–∑ –ë–î
        params.append(min_size)
    
    if max_size is not None:
        query += " AND area <= ?" # area –∑–¥–µ—Å—å - —ç—Ç–æ –ø–ª–æ—â–∞–¥—å –∏–∑ –ë–î
        params.append(max_size)
    
    query += f"""
    )
    SELECT id, title, price, location, property_type, area, rooms, baths, geography, price_rank FROM RankedProperties  -- –Ø–≤–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    WHERE price_rank <= ?
    ORDER BY location, price_rank
    """
    params.append(top_n)
    
    df = execute_query(query, params=tuple(params))
    
    if df is not None and not df.empty:
        if 'rooms' in df.columns:
            df['bedrooms'] = df['rooms']
        if 'baths' in df.columns:
            df['bathrooms'] = df['baths']
        
        # 'area' –≤ df - —ç—Ç–æ —á–∏—Å–ª–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ –ë–î.
        # 'location' –≤ df - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–∞–π–æ–Ω.
        # –î–ª—è –∫–∞—Ä—Ç—ã –Ω–∞–º –Ω—É–∂–µ–Ω —Ä–∞–π–æ–Ω –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –∏ –ª–µ–≥–µ–Ω–¥—ã, –∏ –ø–ª–æ—â–∞–¥—å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        # –ù–µ –±—É–¥–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å 'area' (–ø–ª–æ—â–∞–¥—å).
        # –î–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å —Ç–µ–º, –∫–∞–∫ –∫–∞—Ä—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞–π–æ–Ω, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'location' –Ω–∞–ø—Ä—è–º—É—é 
        # –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º 'district' –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º 'location' –∫–∞–∫ –µ—Å—Ç—å, –∏ 'area' –∫–∞–∫ –µ—Å—Ç—å (—á–∏—Å–ª–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å).
        # –ö–∞—Ä—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'location' –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ —Ü–≤–µ—Ç–∞–º/–ª–µ–≥–µ–Ω–¥–µ.
    
    return df

def get_property(property_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ ID"""
    query = "SELECT id, title, price, location, property_type, area, rooms, baths, geography, property_url FROM properties WHERE id = ?"
    df = execute_query(query, params=(property_id,))
    
    if df is not None and not df.empty:
        property_dict = df.iloc[0].to_dict()
        
        if 'geography' in property_dict and property_dict['geography']:
            lat, lng = extract_coordinates(property_dict['geography'])
            property_dict['latitude'] = lat
            property_dict['longitude'] = lng
        
        if 'rooms' in property_dict:
            property_dict['bedrooms'] = property_dict['rooms']
        if 'baths' in property_dict:
            property_dict['bathrooms'] = property_dict['baths']
        
        # 'area' –≤ property_dict - —ç—Ç–æ —á–∏—Å–ª–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å –∏–∑ –ë–î.
        # 'location' –≤ property_dict - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–∞–π–æ–Ω.
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º 'area'.
        
        return property_dict
    
    return None

def get_avg_price_by_area():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ —Ä–∞–π–æ–Ω–∞–º"""
    query = """
    SELECT location as area, AVG(price) as avg_price, COUNT(*) as count
    FROM properties
    GROUP BY location
    ORDER BY avg_price DESC
    """
    return execute_query(query)

def get_count_by_property_type():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    query = """
    SELECT property_type, COUNT(*) as count
    FROM properties
    GROUP BY property_type
    ORDER BY count DESC
    """
    return execute_query(query)

def get_map_data(max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    query = """
    SELECT id, title, price, location as area, property_type, area as size, rooms as bedrooms, baths as bathrooms, 
           geography
    FROM properties
    WHERE geography IS NOT NULL
    """
    
    params = []
    if max_size is not None:
        query += " AND area <= ?"
        params.append(max_size)
    
    df = execute_query(query, params=tuple(params) if params else None)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    if df is not None and not df.empty:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ —Å—Ç–æ–ª–±—Ü—É geography
        df['latitude'] = None
        df['longitude'] = None
        
        for idx, row in df.iterrows():
            if isinstance(row['geography'], str):
                lat, lng = extract_coordinates(row['geography'])
                df.at[idx, 'latitude'] = lat
                df.at[idx, 'longitude'] = lng
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        df['lat'] = df['latitude']
        df['lon'] = df['longitude']
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        df = df.dropna(subset=['latitude', 'longitude'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not df.empty:
            print(f"–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {df.head(3)[['geography', 'latitude', 'longitude']].to_dict('records')}")
    
    return df

def generate_area_colors(areas):
    """–°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ Folium."""
    folium_supported_colors = [
        'red', 'blue', 'green', 'purple', 'orange', 'darkred', 'lightred', 'beige', 'darkblue', 'darkgreen',
        'cadetblue', 'darkpurple', 'pink', 'lightblue', 'lightgreen', 'gray', 'black', 'lightgray'
        # 'white' –ø–ª–æ—Ö–æ –≤–∏–¥–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ, –ø–æ—ç—Ç–æ–º—É –∏—Å–∫–ª—é—á–µ–Ω –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    ]
    unique_areas = sorted(list(set(areas))) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    num_areas = len(unique_areas)
    num_colors = len(folium_supported_colors)
    
    colors = {}
    for i, area in enumerate(unique_areas):
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ —Ä–∞–π–æ–Ω–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º —Ü–≤–µ—Ç–æ–≤
        colors[area] = folium_supported_colors[i % num_colors]
    
    return colors

def get_folium_color(hex_color_or_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HEX-—Ü–≤–µ—Ç –∏–ª–∏ –∏–º—è —Ü–≤–µ—Ç–∞ –¥–ª—è Folium Icon.
       –¢–µ–ø–µ—Ä—å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ generate_area_colors –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º–µ–Ω–∞.
       –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –ª—É—á—à–µ —É–¥–∞–ª–∏—Ç—å.
    """
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ —É–∂–µ –∏–º—è —Ü–≤–µ—Ç–∞
    return hex_color_or_name

def main():
    st.title("–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –î—É–±–∞–µ")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not os.path.isfile(SQLITE_DB_PATH):
        st.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {SQLITE_DB_PATH}")
        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
        return

    # --- –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–≤–µ—Ä—Ö—É ---
    with st.container():
        col1, col2 = st.columns([2, 1])
        with col1:
            min_area_val, max_area_val = st.slider(
                "–ü–ª–æ—â–∞–¥—å (–∫–≤.–º.)",
                min_value=10,
                max_value=400,
                value=(40, 150),
                step=5,
                key="area_slider"
            )
        with col2:
            top_n = st.selectbox(
                "–¢–æ–ø —Å–∞–º—ã—Ö –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ —Ä–µ–≥–∏–æ–Ω—É",
                [3, 5, 10, 15, 20],
                index=1,
                key="top_n_select"
            )

    st.header(f"–¢–æ–ø-{top_n} –Ω–µ–¥–æ—Ä–æ–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ä–∞–π–æ–Ω–∞–º (–ø–ª–æ—â–∞–¥—å –æ—Ç {min_area_val} –¥–æ {max_area_val} –∫–≤.–º.)")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ "—Ç–æ–ø N –ø–æ —Ä–∞–π–æ–Ω–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–ª–æ—â–∞–¥–∏"
    map_data_df = get_cheapest_properties_by_area(top_n=top_n, min_size=min_area_val, max_size=max_area_val)

    if map_data_df is not None and not map_data_df.empty:
        if 'latitude' not in map_data_df.columns or 'longitude' not in map_data_df.columns:
            coords = map_data_df['geography'].apply(lambda x: pd.Series(extract_coordinates(x), index=['latitude', 'longitude']))
            map_data_df = pd.concat([map_data_df, coords], axis=1)

        valid_coords_df = map_data_df[map_data_df['latitude'].notna() & map_data_df['longitude'].notna()].copy()
        valid_coords_df['lat'] = pd.to_numeric(valid_coords_df['latitude'], errors='coerce')
        valid_coords_df['lon'] = pd.to_numeric(valid_coords_df['longitude'], errors='coerce')
        valid_coords_df.dropna(subset=['lat', 'lon'], inplace=True)

        if not valid_coords_df.empty:
            map_center_lat = valid_coords_df['lat'].mean()
            map_center_lon = valid_coords_df['lon'].mean()
            dubai_map = folium.Map(location=[map_center_lat, map_center_lon], zoom_start=10)
            marker_cluster = folium.plugins.MarkerCluster().add_to(dubai_map)

            if 'location' in valid_coords_df.columns:
                area_colors = generate_area_colors(valid_coords_df['location'])
            else:
                area_colors = {}

            for _, row in valid_coords_df.iterrows():
                try:
                    price_str = f"{row.get('price', '–ù/–î'):,} AED" if pd.notna(row.get('price')) else "–¶–µ–Ω–∞ –ù/–î"
                    size_val = row.get('area')
                    size_str = f"{size_val} –∫–≤.–º." if pd.notna(size_val) else "–ü–ª–æ—â–∞–¥—å –ù/–î"
                    tooltip_text = f"{price_str} - {size_str}"
                    area_name = row.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    marker_color_name = area_colors.get(area_name, 'blue')
                    property_url = row.get('property_url') if 'property_url' in row else None
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if property_url and isinstance(property_url, str) and property_url.strip():
                        more_link = f'<a href="{property_url}" target="_blank" rel="noopener noreferrer">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>'
                    else:
                        more_link = ''
                    popup_html = (
                        f"<b>{row.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b><br>"
                        f"–¶–µ–Ω–∞: {price_str}<br>"
                        f"–†–∞–π–æ–Ω: {area_name}<br>"
                        f"–ü–ª–æ—â–∞–¥—å: {size_str}<br>"
                        f"–¢–∏–ø: {row.get('property_type', '–ù/–î')}<br>"
                        f"–°–ø–∞–ª—å–Ω–∏: {row.get('bedrooms', '–ù/–î')}<br>"
                        f"–í–∞–Ω–Ω—ã–µ: {row.get('bathrooms', '–ù/–î')}<br>"
                        f"{more_link}"
                    )
                    folium.Marker(
                        location=[row['lat'], row['lon']],
                        popup=folium.Popup(popup_html, max_width=300),
                        tooltip=tooltip_text,
                        icon=folium.Icon(color=marker_color_name, icon='home', prefix='fa')
                    ).add_to(marker_cluster)
                except Exception:
                    pass
            folium_static(dubai_map, width=None, height=600)
        else:
            st.warning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª–µ–∑–Ω–æ)
    query_params = st.query_params
    property_id_query = query_params.get("property_id", None) # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    
    if property_id_query:
        property_details = get_property(property_id_query) 
        if property_details:
            st.subheader(f"–î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–∞: {property_details.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            formatted_data = {
                "ID –û–±—ä–µ–∫—Ç–∞": property_details.get('id', '–ù/–î'), # –î–æ–±–∞–≤–ª—è–µ–º ID
                "–ù–∞–∑–≤–∞–Ω–∏–µ": property_details.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                "–¶–µ–Ω–∞": f"{property_details.get('price', '–ù/–î')} AED",
                "–†–∞–π–æ–Ω": property_details.get('location', '–ù/–î'), 
                "–¢–∏–ø": property_details.get('property_type', '–ù/–î'),
                "–ü–ª–æ—â–∞–¥—å": f"{property_details.get('area')} –∫–≤.–º." if pd.notna(property_details.get('area')) else "–ü–ª–æ—â–∞–¥—å –ù/–î", 
                "–°–ø–∞–ª—å–Ω–∏": property_details.get('bedrooms', '–ù/–î'),
                "–í–∞–Ω–Ω—ã–µ": property_details.get('bathrooms', '–ù/–î'),
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫": property_details.get('property_url', '–ù/–î') # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                # –ü–æ–ª—è "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞,
                # –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ property_details (—Ç.–µ. –≤ get_property –∏ –≤ –ë–î)
            }
            col1, col2 = st.columns(2)
            with col1:
                for key, value in formatted_data.items():
                    # –î–ª—è id –∏ —Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if key == "–°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫" and value and value != '–ù/–î':
                        st.markdown(f"**{key}:** <a href='{value}' target='_blank'>{value}</a>", unsafe_allow_html=True)
                    elif key == "ID –û–±—ä–µ–∫—Ç–∞":
                        st.write(f"**{key}:** {value}") # –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º ID
                    elif key != 'id': # –°—Ç–∞—Ä–æ–µ —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–æ–≤—Å–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ –º–µ—à–∞–µ—Ç
                        st.write(f"**{key}:** {value}")
            with col2:
                 # ... (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã)
                 pass # –ø–æ–∫–∞ –ø—É—Å—Ç–æ

if __name__ == "__main__":
    main() 