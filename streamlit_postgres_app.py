import streamlit as st
import pandas as pd
import psycopg2
import psycopg2.extras
import folium
from streamlit_folium import folium_static
import plotly.express as px
import plotly.graph_objects as go
import os
from datetime import datetime
import random
import numpy as np
import colorsys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DB_CONFIG = {
    'dbname': os.getenv('DB_NAME', 'postgres'),
    'user': os.getenv('DB_USER', 'admin'),
    'password': os.getenv('DB_PASSWORD', 'Enclude79'),
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432')
}

st.set_page_config(
    page_title="Dubai Property Analysis",
    page_icon="üè¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL
def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    try:
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
        connection_info = {
            'dbname': DB_CONFIG['dbname'],
            'user': DB_CONFIG['user'],
            'host': DB_CONFIG['host'],
            'port': DB_CONFIG['port']
        }
        st.write(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {connection_info}")
        
        conn = psycopg2.connect(
            dbname=DB_CONFIG['dbname'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            host=DB_CONFIG['host'],
            port=DB_CONFIG['port'],
            connect_timeout=10  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        st.success("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return conn
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL: {e}")
        st.write("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã:")
        st.write("1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É")
        st.write("2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–∞—Ä–æ–ª—å —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ")
        st.write("3. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ bayut_properties —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        st.write(f"4. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Å —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î)")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
def execute_query(query, params=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ DataFrame"""
    try:
        conn = get_db_connection()
        if conn is None:
            return None
        
        if params:
            df = pd.read_sql_query(query, conn, params=params)
        else:
            df = pd.read_sql_query(query, conn)
        
        conn.close()
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None

def get_properties(limit=100, offset=0, max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    base_query = "SELECT * FROM bayut_properties"
    
    conditions = []
    params = []
    
    if max_size is not None:
        conditions.append("size <= %s")
        params.append(max_size)
    
    if conditions:
        base_query += " WHERE " + " AND ".join(conditions)
    
    query = base_query + " ORDER BY id LIMIT %s OFFSET %s"
    params.extend([limit, offset])
    
    df = execute_query(query, params=tuple(params))
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    count_query = "SELECT COUNT(*) as total FROM bayut_properties"
    if conditions:
        count_query += " WHERE " + " AND ".join(conditions)
    
    count_df = execute_query(count_query, params=tuple(params[:-2]) if params[:-2] else None)
    total_count = count_df.iloc[0]['total'] if count_df is not None else 0
    
    return {
        "data": df,
        "total": total_count,
        "limit": limit,
        "offset": offset
    }

def get_cheapest_properties_by_area(top_n=3, max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ –Ω–µ–¥–æ—Ä–æ–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ —Ä–∞–π–æ–Ω–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    query = """
    WITH RankedProperties AS (
        SELECT 
            *,
            ROW_NUMBER() OVER (PARTITION BY area ORDER BY price) as price_rank
        FROM bayut_properties
        WHERE 1=1
    """
    
    params = []
    if max_size is not None:
        query += " AND size <= %s"
        params.append(max_size)
    
    query += f"""
    )
    SELECT * FROM RankedProperties
    WHERE price_rank <= %s
    ORDER BY area, price_rank
    """
    params.append(top_n)
    
    return execute_query(query, params=tuple(params))

def get_property(property_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ ID"""
    query = "SELECT * FROM bayut_properties WHERE id = %s"
    df = execute_query(query, params=(property_id,))
    
    if df is not None and not df.empty:
        return df.iloc[0].to_dict()
    
    return None

def get_avg_price_by_area():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ —Ä–∞–π–æ–Ω–∞–º"""
    query = """
    SELECT area, AVG(price) as avg_price, COUNT(*) as count
    FROM bayut_properties
    GROUP BY area
    ORDER BY avg_price DESC
    """
    return execute_query(query)

def get_count_by_property_type():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    query = """
    SELECT property_type, COUNT(*) as count
    FROM bayut_properties
    GROUP BY property_type
    ORDER BY count DESC
    """
    return execute_query(query)

def get_map_data(max_size=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–ª–æ—â–∞–¥–∏"""
    query = """
    SELECT id, title, price, area, property_type, size, bedrooms, bathrooms, latitude, longitude 
    FROM bayut_properties
    WHERE latitude IS NOT NULL AND longitude IS NOT NULL
    """
    
    params = []
    if max_size is not None:
        query += " AND size <= %s"
        params.append(max_size)
    
    return execute_query(query, params=tuple(params) if params else None)

def generate_area_colors(areas):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞"""
    unique_areas = list(set(areas))
    num_areas = len(unique_areas)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ HSV-–∫—Ä—É–≥—É
    colors = {}
    for i, area in enumerate(unique_areas):
        hue = i / num_areas
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HSV –≤ RGB, –∑–∞—Ç–µ–º –≤ hex
        r, g, b = colorsys.hsv_to_rgb(hue, 0.8, 0.9)
        color = f'#{int(r*255):02x}{int(g*255):02x}{int(b*255):02x}'
        colors[area] = color
    
    return colors

def main():
    st.title("–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –î—É–±–∞–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = get_db_connection()
        if conn is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL.")
            st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–¥–µ.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM bayut_properties")
            count = cursor.fetchone()[0]
            st.sidebar.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: PostgreSQL\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {count:,}")
            cursor.close()
            conn.close()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã 'bayut_properties': {e}")
            st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ bayut_properties —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É
    max_size = st.sidebar.slider(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º)",
        min_value=0,
        max_value=1000,
        value=500,
        step=50
    )
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4 = st.tabs(["–û–±–∑–æ—Ä", "–ö–∞—Ä—Ç–∞", "–î–µ—Ç–∞–ª–∏", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ"])
    
    with tab1:
        st.header("–û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        property_types_df = get_count_by_property_type()
        if property_types_df is not None and not property_types_df.empty:
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –±–∞—Ä-—á–∞—Ä—Ç –¥–ª—è —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
            fig = px.bar(
                property_types_df,
                y='property_type',
                x='count',
                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                labels={'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤', 'property_type': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'},
                orientation='h',
                color='count',
                color_continuous_scale='Viridis'
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ —Ä–∞–π–æ–Ω–∞–º
        price_by_area_df = get_avg_price_by_area()
        if price_by_area_df is not None and not price_by_area_df.empty:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø 15 —Ä–∞–π–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–æ–≤
            top_areas = price_by_area_df.sort_values('count', ascending=False).head(15)
            
            # –ë–∞—Ä-—á–∞—Ä—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º
            fig = px.bar(
                top_areas,
                x='area',
                y='avg_price',
                title='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º (—Ç–æ–ø 15 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä–µ–∫—Ç–æ–≤)',
                labels={'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (AED)', 'area': '–†–∞–π–æ–Ω', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤'},
                color='count',
                color_continuous_scale='Viridis',
                text_auto='.2s'
            )
            fig.update_traces(texttemplate='%{y:,.0f}', textposition='outside')
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ä–∞–π–æ–Ω–∞–º
        cheapest_by_area_df = get_cheapest_properties_by_area(top_n=1, max_size=max_size)
        if cheapest_by_area_df is not None and not cheapest_by_area_df.empty:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø 10 —Ä–∞–π–æ–Ω–æ–≤
            top_cheapest = cheapest_by_area_df.sort_values('price').head(10)
            
            st.subheader("–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–π–æ–Ω–∞–º")
            cols = st.columns(2)
            
            with cols[0]:
                # –¢–∞–±–ª–∏—Ü–∞ —Å —Å–∞–º—ã–º–∏ –¥–µ—à–µ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
                st.dataframe(
                    top_cheapest[['area', 'title', 'price', 'size', 'bedrooms']],
                    column_config={
                        'area': '–†–∞–π–æ–Ω',
                        'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                        'price': st.column_config.NumberColumn('–¶–µ–Ω–∞ (AED)', format="%.0f"),
                        'size': st.column_config.NumberColumn('–ü–ª–æ—â–∞–¥—å (–∫–≤.–º)', format="%.1f"),
                        'bedrooms': '–°–ø–∞–ª—å–Ω–∏'
                    },
                    use_container_width=True
                )
            
            with cols[1]:
                # –ë–∞—Ä-—á–∞—Ä—Ç –¥–ª—è —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                fig = px.bar(
                    top_cheapest,
                    x='area',
                    y='price',
                    title='–°–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–π–æ–Ω–∞–º',
                    labels={'price': '–¶–µ–Ω–∞ (AED)', 'area': '–†–∞–π–æ–Ω'},
                    color='bedrooms',
                    text_auto='.2s'
                )
                fig.update_traces(texttemplate='%{y:,.0f}', textposition='outside')
                fig.update_layout(height=400)
                st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.header("–ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã
        map_data = get_map_data(max_size=max_size)
        if map_data is not None and not map_data.empty:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
            map_data = map_data.dropna(subset=['latitude', 'longitude'])
            
            if not map_data.empty:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤
                area_colors = generate_area_colors(map_data['area'])
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
                m = folium.Map(location=[25.2048, 55.2708], zoom_start=11)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
                for idx, row in map_data.iterrows():
                    # –¶–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞ –ø–æ —Ä–∞–π–æ–Ω—É
                    color = area_colors.get(row['area'], '#3388ff')
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                    popup_html = f"""
                    <div style="width: 200px">
                        <h4>{row['title']}</h4>
                        <p><b>–¶–µ–Ω–∞:</b> {row['price']:,.0f} AED</p>
                        <p><b>–†–∞–π–æ–Ω:</b> {row['area']}</p>
                        <p><b>–¢–∏–ø:</b> {row['property_type']}</p>
                        <p><b>–ü–ª–æ—â–∞–¥—å:</b> {row['size']:,.1f} –∫–≤.–º</p>
                        <p><b>–°–ø–∞–ª—å–Ω–∏:</b> {row['bedrooms']}</p>
                        <p><b>–°–∞–Ω—É–∑–ª—ã:</b> {row['bathrooms']}</p>
                    </div>
                    """
                    
                    folium.Marker(
                        [row['latitude'], row['longitude']],
                        popup=folium.Popup(popup_html, max_width=300),
                        tooltip=f"{row['title']} ({row['price']:,.0f} AED)",
                        icon=folium.Icon(color='blue', icon='home', prefix='fa')
                    ).add_to(m)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
                legend_html = """
                <div style="position: fixed; bottom: 50px; left: 50px; z-index: 1000; background-color: white; padding: 10px; border: 2px solid grey; border-radius: 5px;">
                <h4>–†–∞–π–æ–Ω—ã</h4>
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º 10 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤
                top_areas = map_data['area'].value_counts().head(10).index.tolist()
                for area in top_areas:
                    color = area_colors.get(area, '#3388ff')
                    legend_html += f'<div><span style="background-color:{color}; width:15px; height:15px; display:inline-block; margin-right:5px;"></span>{area}</div>'
                
                legend_html += "</div>"
                
                m.get_root().html.add_child(folium.Element(legend_html))
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç—É
                folium_static(m, width=1000, height=600)
            else:
                st.warning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç—ã.")
    
    with tab3:
        st.header("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        properties_per_page = 10
        page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, value=1, step=1)
        offset = (page - 1) * properties_per_page
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        properties_result = get_properties(limit=properties_per_page, offset=offset, max_size=max_size)
        
        if properties_result is not None and properties_result["data"] is not None:
            properties_df = properties_result["data"]
            total_properties = properties_result["total"]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            total_pages = (total_properties + properties_per_page - 1) // properties_per_page
            st.write(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø–∏—Å–∏ {offset+1}-{min(offset+properties_per_page, total_properties)} –∏–∑ {total_properties} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages})")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            if not properties_df.empty:
                # –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞
                list_columns = ['id', 'title', 'price', 'area', 'size', 'bedrooms', 'bathrooms']
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                st.dataframe(
                    properties_df[list_columns],
                    column_config={
                        'id': 'ID',
                        'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                        'price': st.column_config.NumberColumn('–¶–µ–Ω–∞ (AED)', format="%.0f"),
                        'area': '–†–∞–π–æ–Ω',
                        'size': st.column_config.NumberColumn('–ü–ª–æ—â–∞–¥—å (–∫–≤.–º)', format="%.1f"),
                        'bedrooms': '–°–ø–∞–ª—å–Ω–∏',
                        'bathrooms': '–°–∞–Ω—É–∑–ª—ã'
                    },
                    use_container_width=True
                )
                
                # –í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                selected_id = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
                    options=properties_df['id'].tolist(),
                    format_func=lambda x: f"ID: {x} - {properties_df[properties_df['id'] == x]['title'].values[0]}"
                )
                
                if selected_id:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ
                    property_details = get_property(selected_id)
                    
                    if property_details:
                        st.subheader(property_details['title'])
                        
                        # –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write(f"**–¶–µ–Ω–∞:** {property_details['price']:,.0f} AED")
                            st.write(f"**–†–∞–π–æ–Ω:** {property_details.get('area', '–ù/–î')}")
                            st.write(f"**–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:** {property_details.get('property_type', '–ù/–î')}")
                            st.write(f"**–ü–ª–æ—â–∞–¥—å:** {property_details.get('size', '–ù/–î'):,.1f} –∫–≤.–º")
                            st.write(f"**–°–ø–∞–ª—å–Ω–∏:** {property_details.get('bedrooms', '–ù/–î')}")
                            st.write(f"**–°–∞–Ω—É–∑–ª—ã:** {property_details.get('bathrooms', '–ù/–î')}")
                            
                            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏-–∫–∞—Ä—Ç—É
                            if property_details.get('latitude') and property_details.get('longitude'):
                                mini_map = folium.Map(
                                    location=[property_details['latitude'], property_details['longitude']], 
                                    zoom_start=15
                                )
                                folium.Marker(
                                    [property_details['latitude'], property_details['longitude']],
                                    tooltip=property_details['title'],
                                    icon=folium.Icon(color='red', icon='home', prefix='fa')
                                ).add_to(mini_map)
                                st.write("**–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:**")
                                folium_static(mini_map, width=400, height=300)
                        
                        with col2:
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            st.write(f"**–°—Ç–∞—Ç—É—Å:** {property_details.get('status', '–ù/–î')}")
                            st.write(f"**–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:** {property_details.get('year_built', '–ù/–î')}")
                            st.write(f"**–î–µ–≤–µ–ª–æ–ø–µ—Ä:** {property_details.get('developer', '–ù/–î')}")
                            st.write(f"**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {property_details.get('updated_at', '–ù/–î')}")
                            
                            # –û–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
                            if property_details.get('description'):
                                st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**")
                                st.write(property_details['description'])
                    else:
                        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ —Å ID {selected_id}")
            else:
                st.warning("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.")
    
    with tab4:
        st.header("–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        properties_all = get_properties(limit=1000, max_size=max_size)
        
        if properties_all is not None and properties_all["data"] is not None:
            df = properties_all["data"]
            
            if not df.empty:
                # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–π–æ–Ω—É –∏ —Ç–∏–ø—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ —Ä–∞–π–æ–Ω–∞–º –∏ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –∏ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                areas = df['area'].dropna().unique()
                property_types = df['property_type'].dropna().unique()
                
                # –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                selected_areas = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                    options=areas,
                    default=list(areas)[:5] if len(areas) > 5 else list(areas)
                )
                
                # –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                selected_types = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:",
                    options=property_types,
                    default=list(property_types)[:3] if len(property_types) > 3 else list(property_types)
                )
                
                if selected_areas and selected_types:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    filtered_df = df[(df['area'].isin(selected_areas)) & (df['property_type'].isin(selected_types))]
                    
                    if not filtered_df.empty:
                        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                        pivot_df = filtered_df.pivot_table(
                            values='price',
                            index='area',
                            columns='property_type',
                            aggfunc='mean'
                        )
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                        st.write("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º –∏ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (AED):")
                        st.dataframe(
                            pivot_df.style.format("{:,.0f}"),
                            use_container_width=True
                        )
                        
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏
                        fig = px.bar(
                            filtered_df,
                            x='area',
                            y='price',
                            color='property_type',
                            barmode='group',
                            title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö —Ü–µ–Ω –ø–æ —Ä–∞–π–æ–Ω–∞–º –∏ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                            labels={'price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (AED)', 'area': '–†–∞–π–æ–Ω', 'property_type': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'},
                            height=500
                        )
                        fig.update_layout(xaxis={'categoryorder': 'total descending'})
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
                        filtered_df['price_per_sqm'] = filtered_df['price'] / filtered_df['size']
                        
                        fig2 = px.box(
                            filtered_df,
                            x='area',
                            y='price_per_sqm',
                            color='property_type',
                            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω–∞–º –∏ —Ç–∏–ø–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
                            labels={'price_per_sqm': '–¶–µ–Ω–∞ –∑–∞ –∫–≤.–º (AED)', 'area': '–†–∞–π–æ–Ω', 'property_type': '–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'},
                            height=500
                        )
                        fig2.update_layout(xaxis={'categoryorder': 'total descending'})
                        st.plotly_chart(fig2, use_container_width=True)
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–æ–≤ –∏ —Ç–∏–ø–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")
                else:
                    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –∏ —Ç–∏–ø—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")

if __name__ == "__main__":
    main() 